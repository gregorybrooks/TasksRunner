#!/bin/bash
set -euxo pipefail

# The script runs the pipeline on user supplied `APP_DIR` and `BETTER_PATH`.

# Prefix attached to Docker image names.
DOCKER_IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX:-better}"
DOCKER_IMAGE_TAG="${DOCKER_IMAGE_TAG:-2021108}"

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
ROOT_DIR="$SCRIPT_DIR"
APP_DIR="${APP_DIR:-${ROOT_DIR}/app_dir}"
# Run a specific path, which defaults to A-MDR.
BETTER_PATH="${BETTER_PATH:-A-MDR}"
ENV_FILE="${ENV_FILE:-${ROOT_DIR}/variables.env.ARABIC}"
# The list of stages is in doc/development.md
CURRENT_STAGE=""
# Stage at which the pipeline starts.
START_STAGE="${START_STAGE:-ingest}"
# Flag indicating whether $START_STAGE stage has started.
STARTED="false"
# The list of stages is in doc/development.md
# The stage after which the pipeline stops.
END_STAGE="${END_STAGE:-postprocess}"
# Set to true to create an environment similar to the MITRE evaluation environment.
DISABLE_NETWORK="${DISABLE_NETWORK:-false}"
# If set, this path will be mounted inside all containers. Newly trained models
# will be saved here and models in this directory will be used for decoding as
# well.
MODELS_BASE_DIR="${MODELS_BASE_DIR:-false}"
# Flags passed to Docker.
ADDITIONAL_FLAGS="--rm --env-file=${ENV_FILE} --env BETTER_PATH=${BETTER_PATH} "
ADDITIONAL_FLAGS+=" --env PYTHONIOENCODING=utf8 "
ADDITIONAL_FLAGS+=" -v ${APP_DIR}:/app "
if [ "$MODELS_BASE_DIR" != "false" ]; then
    ADDITIONAL_FLAGS+=" -v ${MODELS_BASE_DIR}:/models "
fi

if [ "$DISABLE_NETWORK" = "true" ]; then
    ADDITIONAL_FLAGS+=" --network none "
fi

#ADDITIONAL_FLAGS+=" --user $(id -u):$(id -g) "


echo "Pipeline step: -------------------------------------------------"
echo "Running Path ${BETTER_PATH}."

if [ "$BETTER_PATH" = "BASIC-A-BOS" ]; then
    if [ "$START_STAGE" = "ingest" ]; then
        echo "---------------- 1. INGEST ----------------"
        CURRENT_STAGE="ingest"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/ingest.sh \
             ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "ingest" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "tokenize-arabic-data" ] || [ $STARTED = "true" ]; then
        echo "---------------- 2. TOKENIZE ARABIC DATA ----------------"
        CURRENT_STAGE="tokenize-arabic-data"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/tokenize-and-normalize-arabic-data.sh \
             ${DOCKER_IMAGE_PREFIX}-arabic-text-prep:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "tokenize-arabic-data" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "translate-ar-en" ] || [ $STARTED = "true" ]; then
        echo "---------------- 3. TRANSLATE-AR-EN ----------------"
        CURRENT_STAGE="translate-ar-en"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/translate.sh \
             ${DOCKER_IMAGE_PREFIX}-translator:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "translate-ar-en" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "augment-with-pre-processing-remove-mentions" ] ||
           [ $STARTED = "true" ]; then
        echo "---------------- 4. AUGMENT WITH PRE-PROCESSING, REMOVE MENTIONS ----------------"
        CURRENT_STAGE="augment-with-pre-processing-remove-mentions"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/augment-everything.sh \
             ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "augment-with-pre-processing-remove-mentions" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "classify-english-mentions" ] || [ $STARTED = "true" ]; then
        echo "---------------- 5. CLASSIFY-ENGLISH-MENTIONS ----------------"
        CURRENT_STAGE="classify-english-mentions"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/classify-english-mentions.sh \
             ${DOCKER_IMAGE_PREFIX}-bert-bio:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "classify-english-mentions" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "augment-with-pre-processing-hybrid-mentions" ] || [ $STARTED = "true" ]; then
        echo "---------------- 6. AUGMENT WITH PRE-PROCESSING, HYBRID MENTIONS ----------------"
        CURRENT_STAGE="augment-with-pre-processing-hybrid-mentions"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/augment-test.sh \
             ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "augment-with-pre-processing-hybrid-mentions" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "detect-triggers" ] || [ $STARTED = "true" ]; then
        echo "---------------- 7. DETECT TRIGGERS  ----------------"
        CURRENT_STAGE="detect-triggers"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/detect-english-triggers.sh \
             ${DOCKER_IMAGE_PREFIX}-bert-bio:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "detect-triggers" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "attach-arguments" ] || [ $STARTED = "true" ]; then
        echo "---------------- 8. ATTACH_ARGUMENTS  ----------------"
        CURRENT_STAGE="attach-arguments"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/attach-arguments.sh \
             ${DOCKER_IMAGE_PREFIX}-argument-attachment:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "attach-arguments" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "postprocess" ] || [ $STARTED = "true" ]; then
        echo "---------------- 9. POSTPROCESS ----------------"
        CURRENT_STAGE="postprocess"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/postprocess.sh \
             ${DOCKER_IMAGE_PREFIX}-event-extractor-boston:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "postprocess" ]; then exit; fi
    fi
elif [ "$BETTER_PATH" = "BASIC-B-BOS" ]; then
    if [ "$START_STAGE" = "ingest" ]; then
        echo "---------------- 1. INGEST ----------------"
        CURRENT_STAGE="ingest"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/ingest.sh \
             ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "ingest" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "augment-train-data-with-pre-processing" ] ||
           [ $STARTED = "true" ]; then
        echo "---------------- 2. AUGMENT TRAIN DATA WITH PRE-PROCESSING ----------------"
        CURRENT_STAGE="augment-train-data-with-pre-processing"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/augment-train.sh ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/augment-mitre-and-isi-split-files.sh \
             ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "augment-train-data-with-pre-processing" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "translate-en-ar" ] || [ $STARTED = "true" ]; then
        echo "---------------- 3. TRANSLATE-EN-AR ----------------"
        CURRENT_STAGE="translate-en-ar"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/translate.sh \
             ${DOCKER_IMAGE_PREFIX}-translator:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "translate-en-ar" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "tokenize-arabic-data" ] || [ $STARTED = "true" ]; then
        echo "---------------- 4. TOKENIZE ARABIC DATA ----------------"
        CURRENT_STAGE="tokenize-arabic-data"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/tokenize-and-normalize-arabic-data.sh \
             ${DOCKER_IMAGE_PREFIX}-arabic-text-prep:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "tokenize-arabic-data" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "postprocess-train-data" ] || [ $STARTED = "true" ]; then
        echo "---------------- 5. POSTPROCESS-TRAIN-DATA ----------------"
        CURRENT_STAGE="postprocess-train-data"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/postprocess-projections.sh \
             ${DOCKER_IMAGE_PREFIX}-event-extractor-boston:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "postprocess-train-data" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "simple-tokenize-train-data" ] || [ $STARTED = "true" ]; then
        echo "---------------- 6. SIMPLE-TOKENIZE-TRAIN-DATA ----------------"
        CURRENT_STAGE="simple-tokenize-train-data"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/tokenize-and-normalize-arabic-data.sh \
             ${DOCKER_IMAGE_PREFIX}-arabic-text-prep:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "simple-tokenize-train-data" ]; then exit; fi
    fi


    if [ "$START_STAGE" = "classify-arabic-mentions" ] || [ $STARTED = "true" ]; then
        echo "---------------- 7. CLASSIFY-ARABIC-MENTIONS ----------------"
        CURRENT_STAGE="classify-arabic-mentions"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/classify-arabic-mentions.sh \
             ${DOCKER_IMAGE_PREFIX}-bert-bio:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "classify-arabic-mentions" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "detect-triggers" ] || [ $STARTED = "true" ]; then
        echo "---------------- 8. DETECT TRIGGERS  ----------------"
        CURRENT_STAGE="detect-triggers"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/detect-arabic-triggers.sh \
             ${DOCKER_IMAGE_PREFIX}-bert-bio:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "detect-triggers" ]; then exit; fi
    fi


    if [ "$START_STAGE" = "attach-arguments" ] || [ $STARTED = "true" ]; then
        echo "---------------- 9. ATTACH ARGUMENTS  ----------------"
        CURRENT_STAGE="attach-arguments"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/attach-arguments.sh \
             ${DOCKER_IMAGE_PREFIX}-argument-attachment:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "attach-arguments" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "retokenize-arabic-data" ] || [ $STARTED = "true" ]; then
        echo "---------------- 10. RETOKENIZE ARABIC DATA ----------------"
        CURRENT_STAGE="retokenize-arabic-data"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/tokenize-and-normalize-arabic-data.sh \
             ${DOCKER_IMAGE_PREFIX}-arabic-text-prep:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "retokenize-arabic-data" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "postprocess" ] || [ $STARTED = "true" ]; then
        echo "---------------- 11. POSTPROCESS ----------------"
        CURRENT_STAGE="postprocess"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/postprocess.sh \
             ${DOCKER_IMAGE_PREFIX}-event-extractor-boston:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "postprocess" ]; then exit; fi
    fi
elif [ "$BETTER_PATH" = "BASIC-B-MDR" ]; then
    if [ "$START_STAGE" = "ingest" ]; then
        echo "---------------- 1. INGEST ----------------"
        CURRENT_STAGE="ingest"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/ingest.sh \
             ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "ingest" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "augment-train-data-with-pre-processing" ] ||
           [ $STARTED = "true" ]; then
        echo "---------------- 2. AUGMENT TRAIN DATA WITH PRE-PROCESSING ----------------"
        CURRENT_STAGE="augment-train-data-with-pre-processing"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/augment-train.sh ${DOCKER_IMAGE_PREFIX}-json-converter
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/augment-mitre-and-isi-split-files.sh \
             ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "augment-train-data-with-pre-processing" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "translate-en-ar" ] || [ $STARTED = "true" ]; then
        echo "---------------- 3. TRANSLATE-EN-AR ----------------"
        CURRENT_STAGE="translate-en-ar"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/translate.sh \
             ${DOCKER_IMAGE_PREFIX}-translator:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "translate-en-ar" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "tokenize-arabic-data" ] || [ $STARTED = "true" ]; then
        echo "---------------- 4. TOKENIZE ARABIC DATA ----------------"
        CURRENT_STAGE="tokenize-arabic-data"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/tokenize-and-normalize-arabic-data.sh \
             ${DOCKER_IMAGE_PREFIX}-arabic-text-prep:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "tokenize-arabic-data" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "postprocess-train-data" ] || [ $STARTED = "true" ]; then
        echo "---------------- 5. POSTPROCESS-TRAIN-DATA ----------------"
        CURRENT_STAGE="postprocess-train-data"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/postprocess-projections.sh \
             ${DOCKER_IMAGE_PREFIX}-event-extractor-boston:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "postprocess-train-data" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "simple-tokenize-train-data" ] || [ $STARTED = "true" ]; then
        echo "---------------- 6. SIMPLE-TOKENIZE-TRAIN-DATA ----------------"
        CURRENT_STAGE="simple-tokenize-train-data"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/tokenize-and-normalize-arabic-data.sh \
             ${DOCKER_IMAGE_PREFIX}-arabic-text-prep:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "simple-tokenize-train-data" ]; then exit; fi
    fi


    if [ "$START_STAGE" = "classify-arabic-mentions" ] || [ $STARTED = "true" ]; then
        echo "---------------- 7. CLASSIFY-ARABIC-MENTIONS ----------------"
        CURRENT_STAGE="classify-arabic-mentions"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/classify-arabic-mentions.sh \
             ${DOCKER_IMAGE_PREFIX}-bert-bio:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "classify-arabic-mentions" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "extract-events" ] || [ $STARTED = "true" ]; then
        echo "---------------- 8. EXTRACT-EVENTS ----------------"
        CURRENT_STAGE="extract-events"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/extract.sh \
             ${DOCKER_IMAGE_PREFIX}-event-extractor-xdygiepp:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "extract-events" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "postprocess" ] || [ $STARTED = "true" ]; then
        echo "---------------- 9. POSTPROCESS ----------------"
        CURRENT_STAGE="postprocess"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/postprocess.sh \
             ${DOCKER_IMAGE_PREFIX}-event-extractor-boston:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "postprocess" ]; then exit; fi
    fi
elif [ "$BETTER_PATH" = "BASIC-E-BOS" ]; then
    if [ "$START_STAGE" = "ingest" ]; then
        echo "---------------- 1. INGEST ----------------"
        CURRENT_STAGE="ingest"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/ingest.sh \
             ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "ingest" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "augment-with-pre-processing-remove-mentions" ] ||
           [ $STARTED = "true" ]; then
        echo "---------------- 2. AUGMENT WITH PRE-PROCESSING, REMOVE MENTIONS ----------------"
        CURRENT_STAGE="augment-with-pre-processing-remove-mentions"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/augment-everything.sh \
             ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "augment-with-pre-processing-remove-mentions" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "classify-english-mentions" ] || [ $STARTED = "true" ]; then
        echo "---------------- 3. CLASSIFY-ENGLISH-MENTIONS ----------------"
        CURRENT_STAGE="classify-english-mentions"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/classify-english-mentions.sh \
             ${DOCKER_IMAGE_PREFIX}-bert-bio:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "classify-english-mentions" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "augment-with-pre-processing-hybrid-mentions" ] || [ $STARTED = "true" ]; then
        echo "---------------- 4. AUGMENT WITH PRE-PROCESSING, HYBRID MENTIONS ----------------"
        CURRENT_STAGE="augment-with-pre-processing-hybrid-mentions"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --entrypoint /code/augment-test.sh \
             ${DOCKER_IMAGE_PREFIX}-json-converter:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "augment-with-pre-processing-hybrid-mentions" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "detect-triggers" ] || [ $STARTED = "true" ]; then
        echo "---------------- 5. DETECT TRIGGERS  ----------------"
        CURRENT_STAGE="detect-triggers"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/detect-english-triggers.sh \
             ${DOCKER_IMAGE_PREFIX}-bert-bio:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "detect-triggers" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "attach-arguments" ] || [ $STARTED = "true" ]; then
        echo "---------------- 6. ATTACH ARGUMENTS  ----------------"
        CURRENT_STAGE="attach-arguments"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/attach-arguments.sh \
             ${DOCKER_IMAGE_PREFIX}-argument-attachment:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "attach-arguments" ]; then exit; fi
    fi

    if [ "$START_STAGE" = "postprocess" ] || [ $STARTED = "true" ]; then
        echo "---------------- 7. POSTPROCESS ----------------"
        CURRENT_STAGE="postprocess"
        STARTED="true"
        time docker run --env CURRENT_STAGE=$CURRENT_STAGE $ADDITIONAL_FLAGS \
             --gpus device=2 --entrypoint /code/postprocess.sh \
             ${DOCKER_IMAGE_PREFIX}-event-extractor-boston:${DOCKER_IMAGE_TAG}
        if [ "$END_STAGE" = "postprocess" ]; then exit; fi
    fi
else
    # TODO: Split paths like above.

    if [ "$START_STAGE" = "ingest" ]; then
        STARTED="true"
        echo "Pipeline step: -------------------------------------------------"
        echo "Converting MITRE files to ISI format."
        time docker run $ADDITIONAL_FLAGS \
             --entrypoint /code/ingest.sh ${DOCKER_IMAGE_PREFIX}-json-converter
        if [ "$END_STAGE" = "ingest" ]; then
            exit
        fi
    fi

    if [ "$START_STAGE" = "tokenize-arabic-data" ] || [ $STARTED = "true" ]; then
        STARTED="true"
        if [ "$BETTER_PATH" = "A-MDR" ] || [ "$BETTER_PATH" = "A-MDR+BOS" ] ||
               [ "$BETTER_PATH" = "A-BOS" ] || [ "$BETTER_PATH" = "A-BOS-JOINT" ] ||
               [ "$BETTER_PATH" = "B" ] || [ "$BETTER_PATH" = "BASIC-A-BOS" ]; then
            echo "Pipeline step: -------------------------------------------------"
            echo "Tokenizing and normalizing Arabic test data."
            time docker run $ADDITIONAL_FLAGS --entrypoint \
                 /code/tokenize-and-normalize-arabic-data.sh ${DOCKER_IMAGE_PREFIX}-arabic-text-prep
            if [ "$END_STAGE" = "tokenize-arabic-data" ]; then
                exit
            fi
        fi
    fi

    if [ "$START_STAGE" = "classify-arabic-mentions" ] || [ $STARTED = "true" ]; then
        STARTED="true"
        if [ "$BETTER_PATH" = "BASIC-A-BOS" ]; then
            echo "Pipeline step: -------------------------------------------------"
            echo "Classifying arabic mentions."
            time docker run $ADDITIONAL_FLAGS --gpus device=2 --entrypoint \
                 /code/classify-arabic-mentions.sh ${DOCKER_IMAGE_PREFIX}-bert-bio
            if [ "$END_STAGE" = "classify-arabic-mentions" ]; then
                exit
            fi
        fi
    fi

    if [ "$START_STAGE" = "augment-with-name-finding" ] || [ $STARTED = "true" ]; then
        STARTED="true"
        if [ "$BETTER_PATH" = "A-MDR" ] || [ "$BETTER_PATH" = "A-MDR+BOS" ] ||
               [ "$BETTER_PATH" = "A-BOS" ] || [ "$BETTER_PATH" = "A-BOS-JOINT" ] ||
               [ "$BETTER_PATH" = "B" ]; then
            echo "Pipeline step: -------------------------------------------------"
            echo "Augment test data with name-finding."
            time docker run $ADDITIONAL_FLAGS --gpus device=2 --entrypoint \
                 /code/augment-with-name-finding.sh ${DOCKER_IMAGE_PREFIX}-event-extractor-boston
            if [ "$END_STAGE" = "augment-with-name-finding" ]; then
                exit
            fi
        fi
    fi

    if [ "$START_STAGE" = "translate" ] || [ $STARTED = "true" ]; then
        STARTED="true"
        if [ "$BETTER_PATH" = "A-MDR" ] || [ "$BETTER_PATH" = "A-MDR+BOS" ] ||
               [ "$BETTER_PATH" = "A-BOS" ] || [ "$BETTER_PATH" = "A-BOS-JOINT" ] ||
               [ "$BETTER_PATH" = "BASIC-A-BOS" ]; then
            echo "Pipeline step: -------------------------------------------------"
            echo "Translating Arabic test JSON files into English."
            time docker run $ADDITIONAL_FLAGS --gpus device=2 --entrypoint \
                 /code/translate.sh ${DOCKER_IMAGE_PREFIX}-translator
            if [ "$END_STAGE" = "translate" ]; then
                exit
            fi
        fi
    fi

    if [ "$START_STAGE" = "augment-with-pre-processing" ] || [ $STARTED = "true" ]; then
        STARTED="true"
        echo "Pipeline step: -------------------------------------------------"
        echo "Augmenting training and test data with English pre-processing."
        if [ "$BETTER_PATH" = "BASIC-A-BOS" ]; then
            ADDITIONAL_FLAGS="$ADDITIONAL_FLAGS --env BASIC-A-BOS-MENTIONS-FLAG=remove"
        fi
        time docker run $ADDITIONAL_FLAGS \
             --entrypoint /code/augment-everything.sh ${DOCKER_IMAGE_PREFIX}-json-converter
        if [ "$END_STAGE" = "augment-with-pre-processing" ]; then
            exit
        fi
    fi

    if [ "$START_STAGE" = "classify-english-mentions" ] || [ $STARTED = "true" ]; then
        STARTED="true"
        if [ "$BETTER_PATH" = "BASIC-A-BOS" ]; then
            echo "Pipeline step: -------------------------------------------------"
            echo "Classifying english mentions."
            time docker run $ADDITIONAL_FLAGS --gpus device=2 --entrypoint \
                 /code/classify-english-mentions.sh ${DOCKER_IMAGE_PREFIX}-bert-bio
            if [ "$END_STAGE" = "classify-english-mentions" ]; then
                exit
            fi
        fi
    fi

    if [ "$START_STAGE" = "augment-with-pre-processing-2" ] || [ $STARTED = "true" ]; then
        STARTED="true"
        if [ "$BETTER_PATH" = "BASIC-A-BOS" ]; then
            echo "Pipeline step: -------------------------------------------------"
            echo "Augmenting training and test data with English pre-processing-2."
            ADDITIONAL_FLAGS="$ADDITIONAL_FLAGS --env BASIC-A-BOS-MENTIONS-FLAG=hybrid"
            time docker run $ADDITIONAL_FLAGS \
                 --entrypoint /code/augment-test.sh ${DOCKER_IMAGE_PREFIX}-json-converter
            if [ "$END_STAGE" = "augment-with-pre-processing-2" ]; then
                exit
            fi
        fi
    fi

    if [ "$START_STAGE" = "extract-events" ] || [ $STARTED = "true" ]; then
        STARTED="true"
        if [ "$BETTER_PATH" = "A-MDR" ] || [ "$BETTER_PATH" = "A-MDR+BOS" ] ||
               [ "$BETTER_PATH" = "E-MDR" ] || [ "$BETTER_PATH" = "E-MDR+BOS" ]; then
            echo "Pipeline step: -------------------------------------------------"
            echo "Extracting events."
            time docker run $ADDITIONAL_FLAGS --gpus device=2 --entrypoint \
                 /code/extract.sh ${DOCKER_IMAGE_PREFIX}-event-extractor-mdr
            if [ "$END_STAGE" = "extract-events" ]; then
                exit
            fi
        fi
        if [ "$BETTER_PATH" = "A-BOS" ] || [ "$BETTER_PATH" = "B" ] ||
               [ "$BETTER_PATH" = "E-BOS" ]; then
            echo "Pipeline step: -------------------------------------------------"
            echo "Extracting events."
            time docker run $ADDITIONAL_FLAGS --gpus device=2 --entrypoint \
                 /code/extract.sh ${DOCKER_IMAGE_PREFIX}-event-extractor-boston
            if [ "$END_STAGE" = "extract-events" ]; then
                exit
            fi
        fi

        if [ "$BETTER_PATH" = "BASIC-B-MDR" ] || [ "$BETTER_PATH" = "BASIC-E-MDR" ]; then
            echo "Pipeline step: -------------------------------------------------"
            echo "Extracting events."
            time docker run $ADDITIONAL_FLAGS --gpus device=2 --entrypoint \
                 /code/extract.sh ${DOCKER_IMAGE_PREFIX}-event-extractor-xdygiepp
            if [ "$END_STAGE" = "extract-events" ]; then
                exit
            fi
        fi
    fi

    # TODO: This is a little misleading because A-BOS-JOINT and E-BOS-JOINT extarct
    # events and attach arguments in one pass. So the stage should actually
    # "event-extraction" for those paths.
    if [ "$START_STAGE" = "attach-arguments" ] || [ $STARTED = "true" ]; then
        STARTED="true"
        if [ "$BETTER_PATH" = "A-BOS" ] || [ "$BETTER_PATH" = "A-MDR+BOS" ] ||
               [ "$BETTER_PATH" = "A-BOS-JOINT" ] ||
               [ "$BETTER_PATH" = "B" ] || [ "$BETTER_PATH" = "E-BOS" ] ||
               [ "$BETTER_PATH" = "E-MDR+BOS" ] || [ "$BETTER_PATH" = "E-BOS-JOINT" ]; then
            echo "Pipeline step: -------------------------------------------------"
            echo "Attaching arguments."
            time docker run $ADDITIONAL_FLAGS --gpus device=2 --entrypoint \
                 /code/attach-arguments.sh ${DOCKER_IMAGE_PREFIX}-argument-attachment
            if [ "$END_STAGE" = "attach-arguments" ]; then
                exit
            fi
        fi
    fi

    if [ "$START_STAGE" = "postprocess" ] || [ $STARTED = "true" ]; then
        STARTED="true"
        echo "Pipeline step: -------------------------------------------------"
        echo "Postprocessing."
        time docker run $ADDITIONAL_FLAGS --gpus device=2 --entrypoint \
             /code/postprocess.sh ${DOCKER_IMAGE_PREFIX}-event-extractor-boston

        if [ "$END_STAGE" = "postprocess" ]; then
            exit
        fi
    fi

fi
